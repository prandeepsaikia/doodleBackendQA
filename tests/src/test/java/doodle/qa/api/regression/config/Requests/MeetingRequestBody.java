package doodle.qa.api.regression.config.Requests;

import lombok.Builder;
import lombok.Value;
import net.datafaker.Faker;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.UUID;

/**
 * A DTO for the meeting request body.
 * This class is immutable and uses the Builder pattern for easy object creation
 * with default values for most fields. The 'calendarId' field is required.
 */
@Value
@Builder(toBuilder = true)
public class MeetingRequestBody {


    public static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ISO_DATE_TIME;
    private static final Faker faker = new Faker();

    // The 'id' field has a default value generated by UUID.
    @Builder.Default
    String id = UUID.randomUUID().toString();

    // The 'title' field has a default value generated by Faker.
    @Builder.Default
    String title = faker.company().name() + " Meeting";

    // The 'description' field has a default value.
    @Builder.Default
    String description = "Description of Meeting";

    // The 'startTime' field defaults to 5 hours from now, formatted as a string.
    @Builder.Default
    String startTime = LocalDateTime.now().plusHours(5).truncatedTo(ChronoUnit.MINUTES).format(DATE_TIME_FORMATTER);

    // The 'endTime' field defaults to 30 minutes after the startTime.
    // We calculate this from the default startTime value.
    @Builder.Default
    String endTime = LocalDateTime.now().plusHours(5).plusMinutes(30).truncatedTo(ChronoUnit.MINUTES).format(DATE_TIME_FORMATTER);

    // The 'location' field has a default value generated by Faker.
    @Builder.Default
    String location = faker.country().capital();

    // The 'calendarId' field is required and has no default value.
    String calendarId;
}
